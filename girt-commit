#!/bin/dash
# Written By Marko Wong (z5309371)
# Girt-Commit saves a copy of all files in the index sub directory to the repository

# Error cases
if [ -d .girt ]
then :
else 
    echo "girt-commit: error: girt repository directory .girt not found"
    exit 1;
fi

if [ $# -ne 2 ] && [ $# -ne 3 ]
then 
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;

elif [ $# -eq 2 ] && [ "$1" != "-m" ]
then
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;

elif [ $# -eq 2 ] && [ "$1" = "-m" ] && [ -z "$2" ]
then
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;

elif [ $# -eq 2 ] && [ "$1" = "-m" ] && [ -z $(echo "$2" | sed 's/ /''/g') ]
then
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;

elif [ $# -eq 3 ] && ([ "$1" != "-a" ] || [ "$2" != "-m" ])
then
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;

elif [ $# -eq 3 ] && [ "$1" = "-a" ] && [ "$2" = "-m" ] && [ -z "$3" ]
then
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;

elif [ $# -eq 3 ] && [ "$1" = "-a" ] && [ "$2" = "-m" ] && [ -z $(echo "$3" | sed 's/ /''/g') ]
then
    echo "usage: girt-commit [-a] -m commit-message";
    exit 1;
fi

# Copy all files in the current working directory (cwd) to index sub directory
if [ "$1" = "-a" ]
then 
    for index_files in .girt/index/*
    do
        if [ -f "$index_files" ]
        then
            f_name=$(basename "$index_files");
            cp "$f_name" ".girt/index";
        fi
    done
fi

# Calculate the prev commit number and next commit number
commit_no=0;
while [ -d ".girt/commit_"$commit_no"" ] 
do
    commit_no=$(( $commit_no + 1 ));
done

prev_commit_no=$(( $commit_no - 1 ));

# commit_no = 0 means there is no existing commits
if [ "$commit_no" != 0 ]
then
    # keeps track of if there is a difference between index and latest commit
    difference_detected=1;

    # Keeps track of the number of files in the sub directory, index
    no_files_in_index=0;
    for file_check in .girt/index/*
    do
        #check if there is a difference between index and latest commit
        if [ -f "$file_check" ]
        then
            file_name=$(basename "$file_check");

            # if there is no difference between the index sub directory and the 
            # latest commit then there is nothing to commit
            diff -s "$file_check" ".girt/commit_"$prev_commit_no"/"$file_name"" >/dev/null 2>/dev/null;
            if [ $? -ne 0 ] 
            then
               difference_detected=0;
            fi
        
            no_files_in_index=$(( $no_files_in_index + 1 ));
        fi
    done

    # count the number of files in latest commit except the commit_message.txt file
    no_files_in_commit=0;
    for file_check in .girt/commit_"$prev_commit_no"/*
    do
        file_name=$(basename "$file_check");
        if [ -f "$file_check" ] && [ "$file_name" != "commit_message.txt" ] && [ "$file_name" != "commit_owner.txt" ]
        then
            no_files_in_commit=$(( $no_files_in_commit + 1 ));
        fi
    done

    # The difference in number of files should 0 if the index and latest commit are the same
    if [ $(( $no_files_in_commit - $no_files_in_index )) -ne 0 ]
    then 
        difference_detected=0;
    fi
    if [ "$difference_detected" = 1 ]
    then
        echo "nothing to commit";
        exit 1;
    fi

# if there is no existing commits then only check if index is empty
else
    no_files=0;
    for files in .girt/index/*
    do
        if [ -f "$files" ]
        then
            no_files=$(( $no_files + 1 ));
        fi
    done

    if [ $no_files -eq 0 ]
    then 
        echo "nothing to commit"
        exit 1;
    fi
fi


# creating a sub directory for a new commit
mkdir ".girt/commit_"$commit_no"";


# Copy all the files from index into commmit sub directory
for file in .girt/index/*
do
    if [ -f "$file" ]
    then
        cp "$file" ".girt/commit_"$commit_no"";
    fi
done

# Create a commit_message.txt for the commit message
if [ $# -eq 2 ]
then
    echo "$2" > .girt/commit_"$commit_no"/commit_message.txt;
elif [ $# -eq 3 ]
then
    echo "$3" > .girt/commit_"$commit_no"/commit_message.txt;
else
    echo "error: $# -ne 2 or 3"
fi

# Extract the current working branch(cwb)
cwb=$(cat .girt/branches/current_working_branch.txt);

# Keep track of which branch created this commit
echo "$cwb" > .girt/commit_"$commit_no"/commit_owner.txt;

# Exit script with message
echo "Committed as commit "$commit_no"";
exit 0;

