#!/bin/dash
# Written by Marko Wong (z5309371)
# Girt-merge adds the changes that have been made to the specified branch or 
# commit to the index, and commits them

# Error check: There must be an existing .girt repository
if [ -d .girt ]
then :
else 
    echo "girt-merge: error: girt repository directory .girt not found"
    exit 1;
fi

# Error check: There must be an existing commit
if [ -d .girt/commit_0 ]
then
    :
else
    echo "girt-merge: error: this command can not be run until after the first commit"
    exit 1;
fi

# Error cases
if [ $# -eq 1 ] && echo "$1" | egrep -qv '^-'
then 
    echo "girt-merge: error: empty commit message";
    exit 1;
fi

if [ $# -ne 3 ]
then 
    echo "usage: girt-merge <branch|commit> -m message";
    exit 1;
elif [ "$2" != "-m" ]
then
    echo "usage: girt-merge <branch|commit> -m message";
    exit 1;
elif [ "$2" = "-m" ] && [ -z $(echo "$3" | sed 's/ /''/g') ]
then
    echo "girt-merge: error: empty commit message";
    exit 1;
fi

# Extract the current working branch(cwb)
cwb=$(cat .girt/branches/current_working_branch.txt);
cwb_latest_commit=$(cat .girt/branches/"$cwb"/latest_commit.txt);
branch_latest_commit=$(cat .girt/branches/"$1"/latest_commit.txt);

# Determine if the merge source is a commit or a branch
# For commit
if [ -d .girt/commit_"$1" ] && echo "$1" | egrep -q '^[0-9]*$'
then
    # don't merge requested commit if the commit is less than or equal to the latest cwb commit
    if [ "$1" -le "$cwb_latest_commit" ]
    then 
        echo "Already up to date"
        exit 0;
    fi
    # Set the source to be a commit
    source_path=".girt/commit_"$1"";
    
elif echo "$1" | egrep -q '^[0-9]*$'
then 
    echo "girt-merge: error: unknown commit '"$1"'";
    exit 1;

# For branch
elif [ -d .girt/branches/"$1" ]
then
    if [ "$cwb_latest_commit" -ge "$branch_latest_commit" ]
    then 
        echo "Already up to date"
        exit 0;
    fi
    # Set the source to be a branch
    source_path=".girt/branches/"$1"";
else 
    echo "girt-merge: error: unknown branch '"$1"'";
    exit 1;
fi

# if the same file differ in both current working branch/commit and 
# merging branch/commit then merge conflict 
for c_file in .girt/commit_"$cwb_latest_commit"/*
do  
    c_file_name=$(basename "$c_file")
    #echo "comparing "$c_file_name""
    if [ -f "$c_file" ] && 
    [ -f .girt/commit_"$branch_latest_commit"/"$c_file_name" ] && 
    [ "$c_file" != "commit_message.txt" ] && 
    [ "$c_file" != "commit_owner.txt" ]
    then 
        diff -s "$c_file" .girt/commit_"$branch_latest_commit"/"$c_file_name" >/dev/null 2>/dev/null
        if [ $? -ne 0 ]
        then 
            echo "girt-merge: error: can not merge"
            exit 1;
        fi 
    fi 
done

#copy all files in source to cwb
for files in "$source_path"/*
do 
    file_name=$(basename "$files");
    # if file exists in cwd(instead of cwb as cwd id more up to date) and branch then ...
    if [ -f "$files" ] && [ -f ./"$file_name" ] && [ "$file_name" != "latest_commit.txt" ]
    then
        # add the changes to cwd
        cp "$files" "./"$file_name"";
        # add the changes to index
        cp "$files" ".girt/index/"$file_name"";

    elif [ -f "$files" ] && [ "$file_name" != "latest_commit.txt" ]
    then 
        # add the changes to cwd
        cp "$files" "./"$file_name"";
        # add the changes to index
        cp "$files" ".girt/index/"$file_name"";
    fi 
done
echo "Fast-forward: no commit created";

# update the latest commit (if necessary) of cwb
if echo "$1" | egrep -q '^[^0-9]'
then
    branch_commit=$(cat .girt/branches/"$1"/latest_commit.txt);
    cwb_commit=$(cat .girt/branches/"$cwb"/latest_commit.txt);
    #if the deleting branch latest commit is more recent than the others then error
    if [ "$branch_commit" -gt "$cwb_commit" ]
    then 
        echo "$branch_commit" > .girt/branches/"$cwb"/latest_commit.txt;
    fi
fi
exit 0;
