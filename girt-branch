#!/bin/dash
# Written by Marko Wong (z5309371)
# Girt-branch either creates a branch, deletes a branch, or lists current branch names.

# Error check: There must be an existing .girt repository
if [ -d .girt ]
then 
    :
else 
    echo "girt-branch: error: girt repository directory .girt not found"
    exit 1;
fi

# Error check: There must be an existing commit
if [ -d .girt/commit_0 ]
then
    :
else
    echo "girt-branch: error: this command can not be run until after the first commit"
    exit 1;
fi

# list all branches if no arguments are passed in
if [ $# -eq 0 ]
then 
    (for branches in .girt/branches/*
    do
        if [ -d "$branches" ]
        then 
            b_name=$(basename "$branches");
            echo "$b_name";
        fi
    done )|sort;

# Error cases
elif [ $# -eq 1 ] && [ "$1" = "-d" ]
then 
    echo "girt-branch: error: branch name required";
    exit 1;

elif [ $# -eq 1 ] && echo "$1" | egrep -q '^-.*'
then 
    echo "usage: girt-branch [-d] <branch>";
    exit 1;

elif [ $# -eq 1 ] && echo "$1" | egrep -q '^[^a-zA-Z].*'
then 
    echo "girt-branch: error: invalid branch name '"$1"'";
    exit 1;

# create a branch named arccording to first argument
elif [ $# -eq 1 ]
then 
    # Branch name have to be unique
    if [ -d .girt/branches/"$1" ]
    then 
        echo "girt-branch: error: branch '"$1"' already exists";
        exit 1;
    else
        mkdir .girt/branches/"$1";

        # Copy all files in the cwb into new branch
        for file in *
        do
            if [ -f "$file" ]
            then
                cp "$file" .girt/branches/"$1"/"$file";
            fi
        done

        # Calculate the prev commit number and next commit number
        commit_no=0;
        while [ -d ".girt/commit_"$commit_no"" ] 
        do
            commit_no=$(( $commit_no + 1 ));
        done

        latest_commit_no=$(( $commit_no - 1 ));

        # Extract the current working branch(cwb)
        cwb=$(cat .girt/branches/current_working_branch.txt);

        # Record the latest commit of the current branch for the new branch
        # Which is not possible until the first checkout so just fetch the latest commit in cwd
        if [ -f ".girt/branches/"$cwb"/latest_commit.txt" ]
        then
            latest_cwb_commit_no=$(cat .girt/branches/"$cwb"/latest_commit.txt);
            echo "$latest_cwb_commit_no" > .girt/branches/"$1"/latest_commit.txt;
        else 
            echo "$latest_commit_no" > .girt/branches/"$1"/latest_commit.txt;
        fi
        
    fi

# Error checking for deleting a branch
# We can assume the user is on a different branch when deleting a branch
elif [ $# -eq 2 ] && [ "$1" = "-d" ] &&  echo "$2" | egrep -q '^[a-zA-Z].*'
then

    if [ -d .girt/branches/"$2" ] && [ "$2" != "master" ]
    then 
        :

    # Can't delete the master branch
    elif [ "$2" = "master" ]
    then
        echo "girt-branch: error: can not delete branch 'master'"
        exit 1;
    else
        echo "girt-branch: error: branch '"$2"' doesn't exist";
        exit 1;
    fi

    #cycle through the branches latest commit and record the most recent commit
    most_recent_commit=0;
    for branch_file in .girt/branches/*
    do
        branch_file_name=$(basename "$branch_file");
        if [ -d "$branch_file" ] && 
        [ -f "$branch_file/latest_commit.txt" ] && 
        [ "$branch_file_name" != "$2" ]
        then
            branch_commit=$(cat "$branch_file/latest_commit.txt");
            if [ "$branch_commit" -gt "$most_recent_commit" ]
            then
                most_recent_commit="$branch_commit";
            fi
        fi 
    done

    deleting_b_commit=$(cat .girt/branches/"$2"/latest_commit.txt);

    #if the deleting branch latest commit is more recent than the others then error
    if [ "$deleting_b_commit" -gt "$most_recent_commit" ]
    then 
        echo "girt-branch: error: branch '"$2"' has unmerged changes";
        exit 1;
    fi

    # Delete branch when "-d" option is used
    echo "Deleted branch '"$2"'";
    rm -r .girt/branches/"$2";

# Branch name have to start with a letter
elif [ $# -eq 2 ] && [ "$1" = "-d" ] && echo "$2" | egrep -q '^[^a-zA-Z].*'
then 
    echo "girt-branch: error: invalid branch name '"$2"'";
    exit 1;

else
    echo "usage: girt-branch [-d] <branch>";
    exit 1;
fi

exit 0;
