#!/bin/dash
# Written by Marko Wong (z5309371)
# Girt-rm removes a file from the index, or from the current directory and the index.

# Error check: There must be an existing .girt repository
if [ -d .girt ]
then :
else 
    echo "girt-rm: error: girt repository directory .girt not found"
    exit 1;
fi

# Usage check
if [ $# -lt 1 ]
then
    echo "usage: girt-rm [--force] [--cached] <filenames>";
    exit 1;
elif [ $# -eq 1 ] && ([ $1 = "--force" ] || [ $1 = "--cached" ])
then 
    echo "usage: girt-rm [--force] [--cached] <filenames>";
    exit 1;
elif [ $# -eq 2 ] && [ $1 = "--force" ] && [ $2 = "--cached" ]
then 
    echo "usage: girt-rm [--force] [--cached] <filenames>";
    exit 1;
fi

# Extract the current working branch(cwb)
cwb=$(cat .girt/branches/current_working_branch.txt);

# Fetch the lastest commit in the cwb
if [ -f ".girt/branches/"$cwb"/latest_commit.txt" ]
then
    latest_commit_no=$(cat .girt/branches/"$cwb"/latest_commit.txt);
else 
    # Which is not possible until the first checkout so just fetch the latest commit in cwd
    commit_no=0;
    while [ -d ".girt/commit_"$commit_no"" ] 
    do
        commit_no=$(( $commit_no + 1 ));
    done

    latest_commit_no=$(( $commit_no - 1 ));
fi

for file in $@
do
    # Detect any differences between index vs cwd vs repo
    if [ -f .girt/index/"$file" ] || [ -f .girt/commit_"$latest_commit_no"/"$file" ] 
    then 
        # Keeps track of which diff is detected, 0 for detected and 1 for undetected
        index_diff_repo=1;
        cwd_diff_repo=1;
        cwd_diff_index=1;

        # Checking when no options are specified
        if [ "$1" != "--force" ] && [ "$1" != "--cached" ] && [ "$2" != "--cached" ]
        then
            # checking for difference between index and latest commit
            diff -s ".girt/index/$file" ".girt/commit_"$latest_commit_no"/"$file"" >/dev/null 2>/dev/null;
            if [ $? -ne 0 ]
            then 
                index_diff_repo=0;
            fi

            # checking for difference between cwd and latest commit
            diff -s "./"$file"" ".girt/commit_"$latest_commit_no"/"$file"" >/dev/null 2>/dev/null;
            if [ $? -ne 0 ]
            then 
                cwd_diff_repo=0; 
            fi

            # checking for difference between index and cwd
            diff -s "./"$file"" ".girt/index/$file" >/dev/null 2>/dev/null;
            if [ $? -ne 0 ]
            then 
                cwd_diff_index=0; 
            fi

            # Prevent the loss of unsaved work
            if [ $index_diff_repo = 0 ] && [ $cwd_diff_index = 0 ]
            then 
                echo "girt-rm: error: '"$file"' in index is different to both to the working file and the repository";
                exit 1;

            elif [ $index_diff_repo = 0 ]
            then
                echo "girt-rm: error: '"$file"' has staged changes in the index";
                exit 1;
            elif [ $cwd_diff_repo = 0 ]
            then 
                echo "girt-rm: error: '"$file"' in the repository is different to the working file";
                exit 1;
            fi
        fi

        # Checks when cached option is used
        if [ "$1" != "--force" ]
        then
            # checking for difference between index and latest commit
            diff -s ".girt/index/$file" ".girt/commit_"$latest_commit_no"/"$file"" >/dev/null 2>/dev/null;
            if [ $? -ne 0 ]
            then 
                index_diff_repo=0;
            fi

            # checking for difference between index and cwd
            diff -s "./"$file"" ".girt/index/$file" >/dev/null 2>/dev/null;
            if [ $? -ne 0 ]
            then 
                cwd_diff_index=0;
            fi

            # Prevent the loss of unsaved work
            if [ $index_diff_repo = 0 ] && [ $cwd_diff_index = 0 ]
            then 
                echo "girt-rm: error: '"$file"' in index is different to both to the working file and the repository";
                exit 1;
            fi
        fi
    fi

    # check if file is in index
    if [ -f .girt/index/"$file" ]
    then
        :
    elif [ "$file" != '--force' ] && [ "$file" != '--cached' ] 
    then
        echo "girt-rm: error: '"$file"' is not in the girt repository";    
        exit 1;
    fi
done

for file in $@
do
    # Remove specified file from index
    if [ -f .girt/index/"$file" ]
    then
        rm .girt/index/"$file";

    elif [ "$file" != '--force' ] && [ "$file" != '--cached' ] 
    then
        echo "girt-rm: error: '"$file"' is not in the girt repository";    
        exit 1;
    fi
    
    # If the --cached option is specified, the file is removed only from the index, 
    # and not from the current directory.
    if [ "$1" != "--cached" ] && [ "$2" != "--cached" ]  
    then
        # Remove specified file from cwd 
        if [ -f ./"$file" ]
        then
            rm ./"$file";
        fi
    fi
done;
exit 0;
